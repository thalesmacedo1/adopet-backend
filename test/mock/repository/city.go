// Code generated by MockGen. DO NOT EDIT.
// Source: city.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/wander4747/adopet-backend/pkg/entity"
)

// MockCity is a mock of City interface.
type MockCity struct {
	ctrl     *gomock.Controller
	recorder *MockCityMockRecorder
}

// MockCityMockRecorder is the mock recorder for MockCity.
type MockCityMockRecorder struct {
	mock *MockCity
}

// NewMockCity creates a new mock instance.
func NewMockCity(ctrl *gomock.Controller) *MockCity {
	mock := &MockCity{ctrl: ctrl}
	mock.recorder = &MockCityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCity) EXPECT() *MockCityMockRecorder {
	return m.recorder
}

// FindByStateID mocks base method.
func (m *MockCity) FindByStateID(ctx context.Context, stateID int) ([]*entity.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStateID", ctx, stateID)
	ret0, _ := ret[0].([]*entity.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStateID indicates an expected call of FindByStateID.
func (mr *MockCityMockRecorder) FindByStateID(ctx, stateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStateID", reflect.TypeOf((*MockCity)(nil).FindByStateID), ctx, stateID)
}
